= form_for @changeset, @action, fn f->
  .flex.flex-column.justify-between.items-baseline.pv2
    h6.fl.f3.fw5.dark-gray.mb0.lh-title Pick Request
    = if assigns[:pick] do
      h6.f5.dark-gray.normal.mv2
        | Status:&#32;
        span class=status_class(@pick.status) = Recase.to_title(friendly_status(@pick.status))

  .flex.flex-wrap.flex-nowrap-l.mw-45.pt3
    label.flex.flex-column.mb4.w-50-l.w-100
      span.dark-gray.pointer.mb2 Max Number of Volunteers
      .select-wrapper.relative.w-100
        = number_input f, :volunteers_max, class: "input-reset flex justify-center h50px ph3 br2 ba br0 bg-white b--light-gray w-100 pointer"
      = error_tag f, :volunteers_max

  .flex.flex-wrap.flex-nowrap-l.mw-45
    label.flex.flex-column.mb4.w-50-l.w-100
      span.dark-gray.pointer.mb2 Last Minute Window (Hours)
      .select-wrapper.relative.w-100
        = number_input f, :last_minute_window_hours, class: "input-reset flex justify-center h50px ph3 br2 ba br0 bg-white b--light-gray w-100 pointer"
      = error_tag f, :last_minute_window_hours

  p.assistant.dark-gray.lh-copy.mw-45.mb0 Select which tree(s) will be picked.
  .mb4
    = error_tag f, :trees

  section.flex.flex-wrap.mb4
    = for tree <- @trees do
      label.relative.f6.tree-block.link.br2.silver.bg-white.mr3.mb3.ba.b--moon-gray.pa3.tree-block-hover.pointer
        .flex.justify-between.items-top
          = Brady.inline_svg("tree", title: "tree icon", alt: "tree icon")
        .f6.mt2.mb1
          span.light-gray Tree ID&nbsp;
          span.green = tree.id
        .db.dark-gray.f4.lh-title.mv0 = tree.nickname
        .flex.mt2.pt1
          .flex.flex-column.mr5
            span.f6.mb1.light-gray Type
            span.f5.dark-gray.lh-title = Recase.to_title(tree.type || "")
          .flex.flex-column
            span.f6.mb1.light-gray Produces
            span.f5.dark-gray.lh-title = Recase.to_title(tree.fruit_variety || "")
        .flex.mt2.pt1
          .flex.flex-column.w-100
            span.f6.mb1.light-gray Height
            span.f5.dark-gray.lh-title.truncate = tree.height

        input.tree-block-checkbox type="checkbox" checked=(if assigns[:pick], do: tree_checked?(@pick, tree)) id="pick_tree_#{tree.id}" name="pick[tree_ids][#{tree.id}]"
        .tree-stripe.tree-stripe-checkbox.br2.br--bottom

  .flex.flex-wrap.flex-nowrap-l.mw-45
    label.flex.flex-column.mb4.w-100.w-50-l
      span.dark-gray.pointer.mb2 Amount of Fruit Tree Owner Takes
      .select-wrapper.relative.w-100
        = select f, :tree_owner_takes, [{"1/3 of the fruit", "1/3 of the fruit"}, {"Just 1 bag or bowl full", "Just 1 bag or bowl full"}, {"None, please donate it all", "None, please donate it all"}], prompt: "Please select an amount", class: "input-reset flex justify-center h50px ph3 br2 ba br0 bg-white b--light-gray w-100 pointer"
        .absolute.top-0.bottom-0.right-1.flex.flex-column.justify-center.no-pointer
          = Brady.inline_svg("icons/arrow", class: "w30px light-gray")
      = error_tag f, :tree_owner_takes


  h6.f3.fw5.dark-gray.mb0.lh-title Select Pick Date Range
  p.assistant.dark-gray.lh-copy.mw-45 When can we pick your tree? Please provide a window of 3-4 days only that you think your tree will be at prime ripeness! We want to time it so our volunteers come when the tree is ready to be picked!

  .flex.flex-wrap.flex-nowrap-l.mw-45
    label.flex.flex-column.mb4.w-50-l.w-100 data-controller="datepicker"
      span.light-gray.pointer.mb2 Pick Window Start Date
      = text_input f, :start_date, placeholder: Date.utc_today(), class: "input-reset flex justify-center h50px ph3 br2 ba br0 bg-white b--light-gray pointer", data: [target: "datepicker.input"]
      = error_tag f, :start_date

  .flex.flex-wrap.flex-nowrap-l.mw-45
    label.flex.flex-column.mb4.w-50-l.w-100 data-controller="datepicker"
      span.light-gray.pointer.mb2 Pick Window End Date
      = text_input f, :end_date, placeholder: Date.utc_today(), class: "input-reset flex justify-center h50px ph3 br2 ba br0 bg-white b--light-gray pointer", data: [target: "datepicker.input"]
      = error_tag f, :end_date

  .flex.flex-wrap.flex-nowrap-l
    .flex.flex-column.mb4
      span.light-gray.mb2 What Time Can We Pick

      .flex.flex-wrap
        label.flex.items-start.mb2.mr4
          = checkbox f, :pick_time_any, class: "ba b--dark-gray w1 h1 mt1"
          span.fw3.light-gray.pointer.ml2.lh-copy Any Time of Day
          = error_tag f, :pick_time_any
        label.flex.items-start.mb2.mr4
          = checkbox f, :pick_time_morning, class: "ba b--dark-gray w1 h1 mt1"
          span.fw3.light-gray.pointer.ml2.lh-copy 8:00AM - 12:00PM
          = error_tag f, :pick_time_morning
        label.flex.items-start.mb2.mr4
          = checkbox f, :pick_time_afternoon, class: "ba b--dark-gray w1 h1 mt1"
          span.fw3.light-gray.pointer.ml2.lh-copy 12:00PM - 5:00PM
          = error_tag f, :pick_time_afternoon
        label.flex.items-start.mb2.mr4
          = checkbox f, :pick_time_evening, class: "ba b--dark-gray w1 h1 mt1"
          span.fw3.light-gray.pointer.ml2.lh-copy 5:00PM - 9:00PM
          = error_tag f, :pick_time_evening

  = if assigns[:pick] && Map.fetch!(assigns[:pick], :scheduled_date) do
    h6.f3.fw5.dark-gray.mb3.lh-title Pick Schedule

    .flex.flex-wrap.flex-nowrap-l.mw-45
      label.flex.flex-column.mb4.w-50-l.w-100 data-controller="datepicker"
        span.light-gray.pointer.mb2 Pick Scheduled Date
        = text_input f, :scheduled_date, placeholder: Date.utc_today(), class: "input-reset flex justify-center h50px ph3 br2 ba br0 bg-white b--light-gray pointer", data: [target: "datepicker.input"]
        = error_tag f, :scheduled_date

    .flex.flex-wrap.flex-nowrap-l.mw-45 data-controller="claim-hours"

      label.flex.flex-column.mb4.w-100.w-50-l.mr2-l
        span.light-gray.pointer.mb2 Pick Start Time
        .select-wrapper.relative.w-100
          = select f, :scheduled_start_time, schedule_pick_available_hours(@pick, :start), prompt: "Select Time", class: "input-reset flex justify-center h50px ph3 br2 ba br0 bg-white b--light-gray w-100", data: [action: "change->claim-hours#updateTime", target: "claim-hours.startTime"]
          .absolute.top-0.bottom-0.right-1.flex.flex-column.justify-center.no-pointer
            = Brady.inline_svg("icons/arrow", class: "w30px light-gray")
        = error_tag f, :scheduled_start_time

      label.flex.flex-column.mb4.w-100.w-50-l.ml2-l
        span.light-gray.pointer.mb2 Pick End Time
        p.light-gray.pt1.mv2.lh-copy data-target="claim-hours.endTime"
          = if @pick.scheduled_end_time do
            = SharedView.twelve_hour_time(@pick.scheduled_end_time)
          - else
            | Select a start time&hellip;

  = if assigns[:pick] && Map.fetch!(assigns[:pick], :equipment_set_id) do

    h6.f3.fw5.dark-gray.mb3.lh-title Gear

    .flex.flex-wrap.flex-nowrap-l.mw-45
      label.flex.flex-column.mb4.w-100
        span.light-gray.pointer.mb2 Eqiupment Set
        .select-wrapper.relative.w-100
          = select f, :equipment_set_id, Enum.map(@equipment_sets, &{"#{&1.name} (#{&1.closest_intersection})", &1.id}), prompt: "Select Equipment Set", class: "input-reset flex justify-center h50px ph3 br2 ba br0 bg-white b--light-gray w-100"
          .absolute.top-0.bottom-0.right-1.flex.flex-column.justify-center.no-pointer
            = Brady.inline_svg("icons/arrow", class: "w30px light-gray")
        = error_tag f, :equipment_set_id

    .flex.flex-wrap.flex-nowrap-l.mw-45
      label.flex.flex-column.mb4.w-100
        span.light-gray.pointer.mb2 Agency
        .select-wrapper.relative.w-100
          = select f, :agency_id, Enum.map(@agencies, &{"#{&1.name} (#{&1.closest_intersection})", &1.id}), prompt: "None", class: "input-reset flex justify-center h50px ph3 br2 ba br0 bg-white b--light-gray w-100"
          .absolute.top-0.bottom-0.right-1.flex.flex-column.justify-center.no-pointer
            = Brady.inline_svg("icons/arrow", class: "w30px light-gray")
        = error_tag f, :agency_id

  h6.f3.fw5.dark-gray.mb0.lh-title Providing a Ladder
  p.assistant.dark-gray.lh-copy.mw-45 If your tree is so tall that is requires a ladder, please make sure you provide one for our volunteers to use!  This may mean borrowing one from your neighbour. We hate to see disappointed volunteers who canâ€™t reach your fruit!

  .flex.flex-wrap.flex-nowrap-l.mw-45

    label.flex.flex-column.mb4.w-100.w-50-l.mr2-l
      span.dark-gray.pointer.mb2 Will a Ladder Be Provided?
      .select-wrapper.relative.w-100
        = select f, :ladder_provided, [{"Yes, I'll provide a ladder", "Yes, I'll provide a ladder"}, {"Yes, I'll borrow a ladder", "Yes, I'll borrow a ladder"}, {"No, but I understand that NFFTT may not be able to pick my whole tree", "No, but I understand that NFFTT may not be able to pick my whole tree"}], prompt: "Please select an option", class: "input-reset flex justify-center h50px ph3 br2 ba br0 bg-white b--light-gray w-100 pointer"
        .absolute.top-0.bottom-0.right-1.flex.flex-column.justify-center.no-pointer
          = Brady.inline_svg("icons/arrow", class: "w30px light-gray")
      = error_tag f, :ladder_provided

  .flex.flex-wrap.flex-nowrap-l.mw-40
    label.flex.flex-column.mb2.w-100
      span.dark-gray.pointer.mb2 While on the property, please be aware of&hellip; (e.g. delicate plants, patio furniture, construction obstacles, etc.) *
      = textarea f, :notes, placeholder: "Your notes here...", class: "input-reset h4 mw-100 ph3 pv2 br2 ba br0 bg-white b--light-gray"
      = error_tag f, :notes

  p.assistant.dark-gray.lh-copy *All notes left in this section will be visable by our admin staff, lead volunteer picker, and pickers!

  .flex.justify-between.items-center.pb4
    = submit "Save", class: "input-reset small-button ml-auto br2 bg-green hover-bg-dark-green white tc bn flex justify-center items-center pointer"
