import Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :fruit_picker, FruitPickerWeb.Endpoint,
  http: [port: 4000],
  static_url: [host: System.get_env("HOST") || "localhost", port: 4000],
  # change to false to test error pages
  debug_errors: true,
  cache_static_lookup: false,
  code_reloader: true,
  check_origin: false,
  watchers: [
    node: [
      "node_modules/webpack/bin/webpack.js",
      "--mode",
      "development",
      "--watch-stdin",
      cd: Path.expand("../assets", __DIR__),
      env: [{"NODE_OPTIONS", "--openssl-legacy-provider"}]
    ]
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :fruit_picker, FruitPickerWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},
      ~r{priv/gettext/.*(po)$},
      ~r{lib/fruit_picker_web/views/.*(ex)$},
      ~r{lib/fruit_picker_web/templates/.*(eex|slim|slime)$}
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Configure your database
if System.get_env("DATABASE_URL") do
  config :fruit_picker, FruitPicker.Repo, url: System.get_env("DATABASE_URL")
else
  config :fruit_picker, FruitPicker.Repo,
    username: "postgres",
    password: "postgres",
    database: "fruit_picker_dev",
    hostname: "localhost",
    pool_size: 10
end

# Configure Mailer
config :fruit_picker, FruitPicker.Mailer, adapter: Bamboo.LocalAdapter

# Configure file uploads
config :arc,
  storage: Arc.Storage.Local,
  storage_dir: "priv/uploads"


# Disable Mapbox
config :fruit_picker, :mapbox, disabled: true
